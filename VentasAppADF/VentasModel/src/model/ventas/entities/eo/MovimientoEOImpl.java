package model.ventas.entities.eo;

import java.math.BigDecimal;

import java.sql.SQLException;
import java.sql.Timestamp;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Apr 20 22:35:44 CDT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MovimientoEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        IdMovimiento,
        IdCliente,
        Estado,
        FechaMov,
        Total,
        ClienteEO,
        DetalleEO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int IDMOVIMIENTO = AttributesEnum.IdMovimiento.index();
    public static final int IDCLIENTE = AttributesEnum.IdCliente.index();
    public static final int ESTADO = AttributesEnum.Estado.index();
    public static final int FECHAMOV = AttributesEnum.FechaMov.index();
    public static final int TOTAL = AttributesEnum.Total.index();
    public static final int CLIENTEEO = AttributesEnum.ClienteEO.index();
    public static final int DETALLEEO = AttributesEnum.DetalleEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MovimientoEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.ventas.entities.eo.MovimientoEO");
    }

    /**
     * Gets the attribute value for IdMovimiento, using the alias name IdMovimiento.
     * @return the value of IdMovimiento
     */
    public DBSequence getIdMovimiento() {
        return (DBSequence) getAttributeInternal(IDMOVIMIENTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdMovimiento.
     * @param value value to set the IdMovimiento
     */
    public void setIdMovimiento(DBSequence value) {
        setAttributeInternal(IDMOVIMIENTO, value);
    }

    /**
     * Gets the attribute value for IdCliente, using the alias name IdCliente.
     * @return the value of IdCliente
     */
    public BigDecimal getIdCliente() {
        return (BigDecimal) getAttributeInternal(IDCLIENTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdCliente.
     * @param value value to set the IdCliente
     */
    public void setIdCliente(BigDecimal value) {
        setAttributeInternal(IDCLIENTE, value);
    }

    /**
     * Gets the attribute value for Estado, using the alias name Estado.
     * @return the value of Estado
     */
    public String getEstado() {
        return (String) getAttributeInternal(ESTADO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Estado.
     * @param value value to set the Estado
     */
    public void setEstado(String value) {
        setAttributeInternal(ESTADO, value);
    }

    /**
     * Gets the attribute value for FechaMov, using the alias name FechaMov.
     * @return the value of FechaMov
     */
    public Timestamp getFechaMov() {
        return (Timestamp) getAttributeInternal(FECHAMOV);
    }

    /**
     * Sets <code>value</code> as the attribute value for FechaMov.
     * @param value value to set the FechaMov
     */
    public void setFechaMov(Timestamp value) {
        setAttributeInternal(FECHAMOV, value);
    }

    /**
     * Gets the attribute value for Total, using the alias name Total.
     * @return the value of Total
     */
    public oracle.jbo.domain.Number getTotal() {
        return (Number) getAttributeInternal(TOTAL);
        //return (oracle.jbo.domain.Number) getAttributeInternal(TOTAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Total.
     * @param value value to set the Total
     */
    public void setTotal(oracle.jbo.domain.Number value) {
        setAttributeInternal(TOTAL, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getClienteEO() {
        return (EntityImpl) getAttributeInternal(CLIENTEEO);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setClienteEO(EntityImpl value) {
        setAttributeInternal(CLIENTEEO, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDetalleEO() {
        return (RowIterator) getAttributeInternal(DETALLEEO);
    }


    /*
     * RUGM 20/04/2021
     * Método que calcula el subtotal de todos los detalles (productos) asociados a un movimiento
     *
     * */

    /**
     * @param idMovimiento key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence idMovimiento) {
        return new Key(new Object[] { idMovimiento });
    }
    
    /*
     * Metodo que calcula el subotoal de todos los detalles (productos)  asocaidos a un movimiento
     * Este método permite actualizar el atributo Total de la tabla  T_MOVIMIENTO
    * */
    public void calcularTotalDetalles(){
        Double totalDetalles = 0.0;
        
        //La entidad DetalleEO cuenta con el subtotal de los productos asocados a los productos indicados en especie
        //Generamos un Row (fila) todos los EO lo tienen implicitamente generado
        RowIterator rowIterDetalle = this.getDetalleEO();
        while (rowIterDetalle.hasNext()){
            Row registro = rowIterDetalle.next();    
            //Caste() de Objeto a Objecto tipo Double
            totalDetalles = totalDetalles + ((Number) registro.getAttribute("Subtotal")).doubleValue();
        }
        System.out.println("==================================");
        System.out.println("Destination: MovimientoEO");
        System.out.println("Total de Detalles =" + totalDetalles);
        //Aplicamos la formular para acotar los decimales a dos
        //Ejecutamos El casting consiste en la conversión de tipos de datos similares (compatibles) entre sí, generalmente a través de la herencia
        totalDetalles = (Double) (Math.round(totalDetalles*100d)/100d);
        System.out.println("===========  REDONDEO ================");
        System.out.println("Total de Detalles Acotado a dos decimales=" + totalDetalles);
        //Al guardar la data conciderar el tipo de dato que esta definido en el EO
        //Para este caso debemos setear el valoir de tipo BigDecimal
        //¿Como hacemos esta conversión? Con un cast
        // Casteo
        System.out.println("CAST BIG DECIMAL =" + new BigDecimal (totalDetalles));
        
        try {
            System.out.println("CAST BIG DECIMAL redondeado=" + new Number ((Math.round(totalDetalles*100d)/100d)));
            this.setTotal(new Number(totalDetalles));
        } catch (SQLException e) {
            System.err.println(e);
        }
        System.out.println("==================================");
    }
}

