package model.ventas.entities.eo;

import java.math.BigDecimal;

import oracle.jbo.Key;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Apr 21 07:04:17 CDT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------

public class DetalleEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        IdDetalle,
        IdMovimiento,
        IdProducto,
        Cantidad,
        Subtotal,
        ProductoEO,
        MovimientoEO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int IDDETALLE = AttributesEnum.IdDetalle.index();
    public static final int IDMOVIMIENTO = AttributesEnum.IdMovimiento.index();
    public static final int IDPRODUCTO = AttributesEnum.IdProducto.index();
    public static final int CANTIDAD = AttributesEnum.Cantidad.index();
    public static final int SUBTOTAL = AttributesEnum.Subtotal.index();
    public static final int PRODUCTOEO = AttributesEnum.ProductoEO.index();
    public static final int MOVIMIENTOEO = AttributesEnum.MovimientoEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DetalleEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.ventas.entities.eo.DetalleEO");
    }


    /**
     * Gets the attribute value for IdDetalle, using the alias name IdDetalle.
     * @return the value of IdDetalle
     */
    public DBSequence getIdDetalle() {
        return (DBSequence) getAttributeInternal(IDDETALLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdDetalle.
     * @param value value to set the IdDetalle
     */
    public void setIdDetalle(DBSequence value) {
        setAttributeInternal(IDDETALLE, value);
    }

    /**
     * Gets the attribute value for IdMovimiento, using the alias name IdMovimiento.
     * @return the value of IdMovimiento
     */
    public BigDecimal getIdMovimiento() {
        return (BigDecimal) getAttributeInternal(IDMOVIMIENTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdMovimiento.
     * @param value value to set the IdMovimiento
     */
    public void setIdMovimiento(BigDecimal value) {
        setAttributeInternal(IDMOVIMIENTO, value);
    }

    /**
     * Gets the attribute value for IdProducto, using the alias name IdProducto.
     * @return the value of IdProducto
     */
    public BigDecimal getIdProducto() {
        return (BigDecimal) getAttributeInternal(IDPRODUCTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdProducto.
     * @param value value to set the IdProducto
     */
    public void setIdProducto(BigDecimal value) {
        setAttributeInternal(IDPRODUCTO, value);
    }

    /**
     * Gets the attribute value for Cantidad, using the alias name Cantidad.
     * @return the value of Cantidad
     */
    public BigDecimal getCantidad() {
        return (BigDecimal) getAttributeInternal(CANTIDAD);
    }

    /**
     * Sets <code>value</code> as the attribute value for Cantidad.
     * @param value value to set the Cantidad
     */
    public void setCantidad(BigDecimal value) {
        setAttributeInternal(CANTIDAD, value);
    }

    /**
     * Gets the attribute value for Subtotal, using the alias name Subtotal.
     * @return the value of Subtotal
     */
    public oracle.jbo.domain.Number getSubtotal() {
        return (oracle.jbo.domain.Number) getAttributeInternal(SUBTOTAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Subtotal.
     * @param value value to set the Subtotal
     */
    public void setSubtotal(oracle.jbo.domain.Number value) {
        setAttributeInternal(SUBTOTAL, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getProductoEO() {
        return (EntityImpl) getAttributeInternal(PRODUCTOEO);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setProductoEO(EntityImpl value) {
        setAttributeInternal(PRODUCTOEO, value);
    }

    /**
     * @return the associated entity MovimientoEOImpl.
     */
    public MovimientoEOImpl getMovimientoEO() {
        return (MovimientoEOImpl) getAttributeInternal(MOVIMIENTOEO);
    }

    /**
     * Sets <code>value</code> as the associated entity MovimientoEOImpl.
     */
    public void setMovimientoEO(MovimientoEOImpl value) {
        setAttributeInternal(MOVIMIENTOEO, value);
    }


    /**
     * @param idDetalle key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence idDetalle) {
        return new Key(new Object[] { idDetalle });
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        System.out.println("===========================");
        System.out.println("Source: DetalleEO");
        System.out.println("Operation =" + operation);
        System.out.println("TransactionEvent = " + e.toString());
        System.out.println("===========================");
        this.getMovimientoEO().calcularTotalDetalles();
        super.doDML(operation, e);
    }
    
}

